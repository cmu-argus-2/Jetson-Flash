// SPDX-License-Identifier: GPL-2.0-only
// SPDX-FileCopyrightText: Copyright (c) 2023-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.

#include <dt-bindings/clock/tegra234-clock.h>
#include <dt-bindings/gpio/tegra234-gpio.h>

/ {
	fragment-camera@0 {
		target-path = "/";
		__overlay__ {
			tegra-capture-vi  {
				num-channels = <2>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					vi_port0: port@0 {
						reg = <0>;
						rpicam3_imx708_vi_in0: endpoint {
							port-index = <1>;
							bus-width = <2>;
							remote-endpoint = <&rpicam3_imx708_csi_out0>;
						};
					};
					vi_port1: port@1 {
						reg = <1>;
						rpicam3_imx708_vi_in1: endpoint {
							port-index = <2>;
							bus-width = <2>;
							remote-endpoint = <&rpicam3_imx708_csi_out1>;
						};
					};
				};
			};

			bus@0 {
				host1x@13e00000 {
					nvcsi@15a00000 {
						num-channels = <2>;
						#address-cells = <1>;
						#size-cells = <0>;
						csi_chan0: channel@0 {
							reg = <0>;
							ports {
								#address-cells = <1>;
								#size-cells = <0>;
								csi_chan0_port0: port@0 {
									reg = <0>;
									rpicam3_imx708_csi_in0: endpoint@0 {
										port-index = <1>;
										bus-width = <2>;
										remote-endpoint = <&rpicam3_imx708_out0>;
									};
								};
								csi_chan0_port1: port@1 {
									reg = <1>;
									rpicam3_imx708_csi_out0: endpoint@1 {
										remote-endpoint = <&rpicam3_imx708_vi_in0>;
									};
								};
							};
						};
						csi_chan1: channel@1 {
							reg = <1>;
							ports {
								#address-cells = <1>;
								#size-cells = <0>;
								csi_chan1_port0: port@0 {
									reg = <0>;
									rpicam3_imx708_csi_in1: endpoint@2 {
										port-index = <2>;
										bus-width = <2>;
										remote-endpoint = <&rpicam3_imx708_out1>;
									};
								};
								csi_chan1_port1: port@1 {
									reg = <1>;
									rpicam3_imx708_csi_out1: endpoint@3 {
										remote-endpoint = <&rpicam3_imx708_vi_in1>;
									};
								};
							};
						};
					};
				};	
				cam_i2cmux {
					i2c_0:i2c@0 {
						imx708_cam0: rpicam3_imx708_a@1a {
							compatible = "sony,imx708";
							/* I2C device address */
							reg = <0x1a>;
							/* V4L2 device node location */
							devnode = "video0";
							/* Physical dimensions of sensor */
							physical_w = "3.680";
							physical_h = "2.760";
							sensor_model = "imx708";
							use_sensor_mode_id = "true";
							/**
                                                        * ==== Modes ====
                                                        * A modeX node is required to support v4l2 driver
                                                        * implementation with NVIDIA camera software stack
                                                        *
                                                        * == Signal properties ==
                                                        *
                                                        * phy_mode = "";
                                                        * PHY mode used by the MIPI lanes for this device
                                                        *
                                                        * tegra_sinterface = "";
                                                        * CSI Serial interface connected to tegra
                                                        * Incase of virtual HW devices, use virtual
                                                        * For SW emulated devices, use host
                                                        *
                                                        * pix_clk_hz = "";
                                                        * Sensor pixel clock used for calculations like exposure and framerate
                                                        *
                                                        * readout_orientation = "0";
                                                        * Based on camera module orientation.
                                                        * Only change readout_orientation if you specifically
                                                        * Program a different readout order for this mode
                                                        *
                                                        * == Image format Properties ==
                                                        *
                                                        * active_w = "";
                                                        * Pixel active region width
                                                        *
                                                        * active_h = "";
                                                        * Pixel active region height
                                                        *
                                                        * pixel_t = "";
                                                        * The sensor readout pixel pattern
                                                        *
                                                        * line_length = "";
                                                        * Pixel line length (width) for sensor mode.
                                                        *
                                                        * == Source Control Settings ==
                                                        *
                                                        * Gain factor used to convert fixed point integer to float
                                                        * Gain range [min_gain/gain_factor, max_gain/gain_factor]
                                                        * Gain step [step_gain/gain_factor is the smallest step that can be configured]
                                                        * Default gain [Default gain to be initialized for the control.
                                                        *     use min_gain_val as default for optimal results]
                                                        * Framerate factor used to convert fixed point integer to float
                                                        * Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
                                                        * Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
                                                        * Default Framerate [Default framerate to be initialized for the control.
                                                        *     use max_framerate to get required performance]
                                                        * Exposure factor used to convert fixed point integer to float
                                                        * For convenience use 1 sec = 1000000us as conversion factor
                                                        * Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
                                                        * Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
                                                        * Default Exposure Time [Default exposure to be initialized for the control.
                                                        *     Set default exposure based on the default_framerate for optimal exposure settings]
                                                        *
							* gain_factor = ""; (integer factor used for floating to fixed point conversion)
                                                        * min_gain_val = ""; (ceil to integer)
                                                        * max_gain_val = ""; (ceil to integer)
                                                        * step_gain_val = ""; (ceil to integer)
                                                        * default_gain = ""; (ceil to integer)
                                                        * Gain limits for mode
                                                        *
                                                        * exposure_factor = ""; (integer factor used for floating to fixed point conversion)
                                                        * min_exp_time = ""; (ceil to integer)
                                                        * max_exp_time = ""; (ceil to integer)
                                                        * step_exp_time = ""; (ceil to integer)
                                                        * default_exp_time = ""; (ceil to integer)
                                                        * Exposure Time limits for mode (sec)
                                                        *
                                                        * framerate_factor = ""; (integer factor used for floating to fixed point conversion)
                                                        * min_framerate = ""; (ceil to integer)
                                                        * max_framerate = ""; (ceil to integer)
                                                        * step_framerate = ""; (ceil to integer)
                                                        * default_framerate = ""; (ceil to integer)
                                                        * Framerate limits for mode (fps)
                                                        *
                                                        * embedded_metadata_height = "";
                                                        * Sensor embedded metadata height in units of rows.
                                                        * If sensor does not support embedded metadata value should be 0.
                                                        */
							mode0 { /* IMX708_MODE_4608x2592_14fps */
								mclk_khz = "24000";
								num_lanes = "2";
								tegra_sinterface = "serial_b";
								lane_polarity = "6";
								phy_mode = "DPHY";
								discontinuous_clk = "yes";
								dpcm_enable = "false";
								cil_settletime = "0";
								active_w = "4608";
								active_h = "2592";
								mode_type = "bayer";
								pixel_phase = "rggb";
								csi_pixel_bit_depth = "10";
								readout_orientation = "90";
								line_length = "4808";
								inherent_gain = "1";
								pix_clk_hz = "297600000"; 
								gain_factor = "16";
								framerate_factor = "1000000";
								exposure_factor = "1000000";
								min_gain_val = "16"; 
								max_gain_val = "256"; 
								step_gain_val = "1";
								default_gain = "16";
								min_hdr_ratio = "1";
								max_hdr_ratio = "1";
								min_framerate = "2000000";
								max_framerate = "14000000";
								step_framerate = "1";
								default_framerate = "14000000";
								min_exp_time = "500";
								max_exp_time = "65487";
								step_exp_time = "1";
								default_exp_time = "1600";
								embedded_metadata_height = "4";
							};
							ports {
								#address-cells = <1>;
								#size-cells = <0>;
								port@0 {
									reg = <0>;
									rpicam3_imx708_out0: endpoint {
										port-index = <1>;
										bus-width = <2>;
										remote-endpoint = <&rpicam3_imx708_csi_in0>;
									};
								};
							};
						};
					};
					i2c_1: i2c@1 {
						imx708_cam1: rpicam3_imx708_c@1a {
							compatible = "sony,imx708";
							/* I2C device address */
							reg = <0x1a>;
							/* V4L2 device node location */
							devnode = "video1";
							/* Physical dimensions of sensor */
							physical_w = "3.680";
							physical_h = "2.760";
							sensor_model = "imx708";
							use_sensor_mode_id = "true";
							/**
                                                        * ==== Modes ====
                                                        * A modeX node is required to support v4l2 driver
                                                        * implementation with NVIDIA camera software stack
                                                        *
                                                        * == Signal properties ==
                                                        *
                                                        * phy_mode = "";
                                                        * PHY mode used by the MIPI lanes for this device
                                                        *
                                                        * tegra_sinterface = "";
                                                        * CSI Serial interface connected to tegra
                                                        * Incase of virtual HW devices, use virtual
                                                        * For SW emulated devices, use host
                                                        *
                                                        * pix_clk_hz = "";
                                                        * Sensor pixel clock used for calculations like exposure and framerate
                                                        *
                                                        * readout_orientation = "0";
                                                        * Based on camera module orientation.
                                                        * Only change readout_orientation if you specifically
                                                        * Program a different readout order for this mode
                                                        *
                                                        * == Image format Properties ==
                                                        *
                                                        * active_w = "";
                                                        * Pixel active region width
                                                        *
                                                        * active_h = "";
                                                        * Pixel active region height
                                                        *
                                                        * pixel_t = "";
                                                        * The sensor readout pixel pattern
                                                        *
                                                        * line_length = "";
                                                        * Pixel line length (width) for sensor mode.
                                                        *
                                                        * == Source Control Settings ==
                                                        *
                                                        * Gain factor used to convert fixed point integer to float
                                                        * Gain range [min_gain/gain_factor, max_gain/gain_factor]
                                                        * Gain step [step_gain/gain_factor is the smallest step that can be configured]
                                                        * Default gain [Default gain to be initialized for the control.
                                                        *     use min_gain_val as default for optimal results]
                                                        * Framerate factor used to convert fixed point integer to float
                                                        * Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
                                                        * Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
                                                        * Default Framerate [Default framerate to be initialized for the control.
                                                        *     use max_framerate to get required performance]
                                                        * Exposure factor used to convert fixed point integer to float
                                                        * For convenience use 1 sec = 1000000us as conversion factor
                                                        * Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
                                                        * Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
                                                        * Default Exposure Time [Default exposure to be initialized for the control.
                                                        *     Set default exposure based on the default_framerate for optimal exposure settings]
                                                        *
                                                        * gain_factor = ""; (integer factor used for floating to fixed point conversion)
                                                        * min_gain_val = ""; (ceil to integer)
                                                        * max_gain_val = ""; (ceil to integer)
                                                        * step_gain_val = ""; (ceil to integer)
                                                        * default_gain = ""; (ceil to integer)
                                                        * Gain limits for mode
							*
                                                        * exposure_factor = ""; (integer factor used for floating to fixed point conversion)
                                                        * min_exp_time = ""; (ceil to integer)
                                                        * max_exp_time = ""; (ceil to integer)
                                                        * step_exp_time = ""; (ceil to integer)
                                                        * default_exp_time = ""; (ceil to integer)
                                                        * Exposure Time limits for mode (sec)
                                                        *
                                                        * framerate_factor = ""; (integer factor used for floating to fixed point conversion)
                                                        * min_framerate = ""; (ceil to integer)
                                                        * max_framerate = ""; (ceil to integer)
                                                        * step_framerate = ""; (ceil to integer)
                                                        * default_framerate = ""; (ceil to integer)
                                                        * Framerate limits for mode (fps)
                                                        *
                                                        * embedded_metadata_height = "";
                                                        * Sensor embedded metadata height in units of rows.
                                                        * If sensor does not support embedded metadata value should be 0.
                                                        */	
							mode0 { /* IMX708_MODE_4608x2592_14fps */
								mclk_khz = "24000";
								num_lanes = "2";
								tegra_sinterface = "serial_c";
								phy_mode = "DPHY";
								discontinuous_clk = "yes";
								dpcm_enable = "false";
								cil_settletime = "0";
								active_w = "4608";
								active_h = "2592";
								mode_type = "bayer";
								pixel_phase = "rggb";
								csi_pixel_bit_depth = "10";
								readout_orientation = "90";
								line_length = "4808";
								inherent_gain = "1";
								pix_clk_hz = "297600000";
								gain_factor = "16";
								framerate_factor = "1000000";
								exposure_factor = "1000000";
								min_gain_val = "16"; 
								max_gain_val = "256"; 
								step_gain_val = "1";
								default_gain = "16";
								min_hdr_ratio = "1";
								max_hdr_ratio = "1";
								min_framerate = "2000000";
								max_framerate = "14000000";
								step_framerate = "1";
								default_framerate = "14000000";
								min_exp_time = "500";
								max_exp_time = "65487";
								step_exp_time = "1";
								default_exp_time = "1600";
								embedded_metadata_height = "4";
							};
							ports {
								#address-cells = <1>;
								#size-cells = <0>;
								port@0 {
									reg = <0>;
									rpicam3_imx708_out1: endpoint {
										port-index = <2>;
										bus-width = <2>;
										remote-endpoint = <&rpicam3_imx708_csi_in1>;
									};
								};
							};
						};
					};
				};
			};

			tcp: tegra-camera-platform {
				compatible = "nvidia, tegra-camera-platform";
				num_csi_lanes = <4>;
				max_lane_speed = <2500000>;
				min_bits_per_pixel = <10>;
				vi_peak_byte_per_pixel = <2>;
				vi_bw_margin_pct = <25>;
				max_pixel_rate = <7500000>;
				isp_peak_byte_per_pixel = <5>;
				isp_bw_margin_pct = <25>;
		
				modules {
					cam_module0: module0 {
						badge = "jakku_front_RBPCV3";
						position = "front";
						orientation = "1";
						cam_module0_drivernode0: drivernode0 {
							pcl_id = "v4l2_sensor";
							sysfs-device-tree = "/sys/firmware/devicetree/base/bus@0/cam_i2cmux/i2c@0/rpicam3_imx708_a@1a";
						};
					};
					cam_module1: module1 {
						badge = "jakku_rear_RBPCV3";
						position = "rear";
						orientation = "1";
						cam_module1_drivernode0: drivernode0 {
							pcl_id = "v4l2_sensor";
							sysfs-device-tree = "/sys/firmware/devicetree/base/bus@0/cam_i2cmux/i2c@1/rpicam3_imx708_c@1a";
						};
					};
				};
			};
		};
	};
};
